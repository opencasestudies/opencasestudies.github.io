<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git | Academic</title>
    <link>/tags/git/</link>
      <atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <description>git</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 17 Apr 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>git</title>
      <link>/tags/git/</link>
    </image>
    
    <item>
      <title>git to know git: an 8 minute introduction</title>
      <link>/post/git-to-know-git/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      <guid>/post/git-to-know-git/</guid>
      <description>


&lt;p&gt;By &lt;a href=&#34;http://amy-peterson.github.io&#34;&gt;Amy Peterson&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;using-git&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using Git&lt;/h3&gt;
&lt;p&gt;Git is a version control system that allows you to track changes made to files while working on a project, either independently or in collaboration with others. It provides a way to save many different components of a project in progress, including the source code, but also the figures and data that the code produces. The importance of understanding and using Git lies in its ability to maintain an organized record of a project, also referred to as a &lt;strong&gt;repository&lt;/strong&gt; or &lt;strong&gt;repo&lt;/strong&gt;, as it evolves. While setting up and learning to use Git may seem intimidating, the majority of the work is in the initial setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;p&gt;GitHub is one of the hosting services that provides an interface for using Git, and can be thought of as Dropbox for version control projects. GitHub is one of the ways to store &lt;strong&gt;repositories&lt;/strong&gt; using Git, and is an easy way to routinely back-up your work as you make progress on a project. It is also helpful for tracking changes, demonstrating who contributed to which projects, when they contributed, and what their contributions were.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;why-i-use-git&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Why I Use Git&lt;/h3&gt;
&lt;p&gt;When I started as an Intern at the &lt;a href=&#34;http://www.libd.org&#34;&gt;LIBD&lt;/a&gt;, I noticed how frequently GitHub was used. As I familiarized myself with some of the projects I would be working on, it became clear how much easier it was to use a system that could document project changes made throughout time in a way that was widely accessible to contributors. Using GitHub also made it easier to re-visit certain scripts or documents to determine what changes were made, when, and why they were needed. Having a detailed history of various project components is an easy way to ensure that contributors have information organized in the same way.&lt;/p&gt;
&lt;p&gt;Beyond working on projects with collaborators, using GitHub is equally rewarding when used for individual projects. Particularly if working on some projects at work on one computer, and needing those updates to be accessible on a different computer at home, GitHub is a quick and easy way to keep a project updated across computers to ensure you are always working on the latest updates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;terms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Terms&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;commit&lt;/strong&gt;: saves changes, either adding a new file to GitHub, or updating the existing version of that file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;issue&lt;/strong&gt;: option on GitHub that creates a list of action items for a repository, similar to a to-do list; tasks can be assigned to particular contributors; also possible to commented on and reference particular tasks within a commit message by including # and the issue number&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;push&lt;/strong&gt;: sends the commits made locally to the repository on GitHub&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pull&lt;/strong&gt;: downloads modified or newly added files, so the local directory matches the current repository on GitHub&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;public-v.-private-repositories&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Public v. Private Repositories&lt;/h2&gt;
&lt;p&gt;Repositories can be public or private. Public repositories are readable to everyone, but permissions are still required to make edits by pushing commits. Private repositories are inaccessible and unreadable without permission, with the repository owner having control to moderate who has access to read, edit, or extend admin access.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;features&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://LieberInstitute.github.io/rstatsclub/post/2018-04-17-git-to-know-git_files/git%20features.png&#34; height=&#34;60&#34; /&gt; &lt;strong&gt;Watch&lt;/strong&gt;: Provides a way to receive notifications regarding all updates on a particular repository of interest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Star&lt;/strong&gt;: Marks a specific repository of interest, making it easier to refer back to it later. Differs from &lt;strong&gt;watch&lt;/strong&gt; in that you do not receive notifications for repository updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fork&lt;/strong&gt;: Downloads a copy of the current version of the file from GitHub. The downloaded copy exists separately from the repo, and reflects the file as is at the time of the download.&lt;/p&gt;
&lt;div id=&#34;initial-set-up&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Initial Set-Up&lt;/h3&gt;
&lt;p&gt;Make an account on &lt;a href=&#34;https://github.com/join&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mac&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mac&lt;/h2&gt;
&lt;p&gt;On newer Macs this should already be set up, but checking is easy!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Open Terminal Application
which git # determine if Git is installed
git --version # lists current Git version installed

## If not installed, use the following to install
git --version
git config &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;Install &lt;a href=&#34;https://gitforwindows.org&#34;&gt;Git for Windows&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;after-git-installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;After Git Installation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Open Terminal (Mac) or Git Bash (Windows)
## Enter the name and email associated with your GitHub account
git config --global user.name &amp;quot;Amy Peterson&amp;quot;
git config --global.email &amp;quot;amy.peterson@jhu.edu&amp;quot;
git config --global --list # Lists global configuration options &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;setting-up-a-repository&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Setting Up a Repository&lt;/h3&gt;
&lt;p&gt;Identify a repository you want to contribute to, or create your own! Repositories can be created on the front page using “Start a project” or by clicking the green “New” button by clicking repositories from your profile page.&lt;/p&gt;
&lt;p&gt;Next, take the following steps&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Open Terminal (Mac) or Git Bash (Windows)
# Change directories so you are in the directory where you want to set up the repository
get pwd() #gives name of current directory 
cd /~Desktop #changes current directory to Desktop 
ls #lists folders you can cd into 
# On the repository page on GitHub, click the green &amp;quot;Clone or Download&amp;quot;
git clone git@GitHub.com:SampleLink.git # Paste link from GitHub to download the repository locally&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-your-work&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Saving Your Work&lt;/h3&gt;
&lt;p&gt;The process of updating GitHub is as follows: &lt;img src=&#34;http://LieberInstitute.github.io/rstatsclub/post/2018-04-17-git-to-know-git_files/git%20process.png&#34; height=&#34;80&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Open Terminal (Mac) or Git Bash (Windows)
git add File1.R # adds file, here File1.R, to GitHub
git commit -m &amp;quot;Example message&amp;quot; # attaches the message in parentheses to the files being added to GitHub
git push # save file to GitHub

# Once updates are pushed, other repository members need to do the following
git pull # updates local directory to reflect the changes made to GitHub&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://LieberInstitute.github.io/rstatsclub/post/2018-04-17-git-to-know-git_files/git%20status.png&#34; height=&#34;50&#34; /&gt; Useful at any time throughout the process of updating a repository, &lt;code&gt;git status&lt;/code&gt; provides information regarding how your local directory differs from the repository on GitHub, and separates those differences into which files have had changes made, and which files are entirely new. In the example below, &lt;strong&gt;File1.R&lt;/strong&gt; and &lt;strong&gt;File2.pdf&lt;/strong&gt; have been modified from what exists on GitHub, while &lt;strong&gt;File3.R&lt;/strong&gt; and &lt;strong&gt;File4.pdf&lt;/strong&gt; are &lt;code&gt;untracked&lt;/code&gt;, or entirely new to the repository.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://LieberInstitute.github.io/rstatsclub/post/2018-04-17-git-to-know-git_files/git%20status%20result.png&#34; width=&#34;500&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;committing-folders&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Committing Folders&lt;/h2&gt;
&lt;p&gt;Folders associated with a project can also be committed to a repository on GitHub. Folders that are currently untracked will be listed in response to &lt;code&gt;git status&lt;/code&gt;, and committing a folder to a repository will simultaneously commit all of its contents. This is particularly useful and efficient when creating a repository for an existing project.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;making-multiple-commits&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making Multiple Commits&lt;/h2&gt;
&lt;p&gt;Multiple commits can be made to group files before pushing them to GitHub. Each set of files you have added using &lt;code&gt;git add&lt;/code&gt; will be grouped together as a single commit once you type &lt;code&gt;git commit&lt;/code&gt; and enter the commit message you want associated with the files. Then, once all the commits you are ready to make are finished, use &lt;code&gt;git push&lt;/code&gt; to save the commits to GitHub.&lt;/p&gt;
&lt;div id=&#34;starting-a-repository-for-an-existing-project&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Starting a Repository for an Existing Project&lt;/h3&gt;
&lt;p&gt;There are only a few differences for setting up a repository for an existing project, compared to the steps previously described.&lt;/p&gt;
&lt;p&gt;Most importantly, after setting up a new repository on GitHub, the next screen will list a number of options. If you are setting up a repository for an existing project, and hoping to commit locally saved files, you will first need to &lt;code&gt;cd&lt;/code&gt; into the locally existing project folder. Then use the instructions below that appear under on the GitHub website under the header “create a new repository on the command line”. In the screenshot from the example below, the repository I named is called “test”.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://LieberInstitute.github.io/rstatsclub/post/2018-04-17-git-to-know-git_files/Existing%20Project.png&#34; width=&#34;500&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;git-ignore&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Git Ignore&lt;/h2&gt;
&lt;p&gt;Git ignore files are important for both new and old project repositories. They are scripts that specify which file types should be ignored, meaning they will not be included in the list &lt;code&gt;git status&lt;/code&gt; provides to inform you of local files that are not currently saved to GitHub. Git ignore is important when creating a repository for an existing project, since there will be some existing local files that you will not want to include in the repository, for example, larger files that are not necessary to upload and include on the repository long-term. With new project repositories, you do not need to start with an extensive git ignore file, but can edit it as the project evolves, since it will become more clear over time which file types you do not want to include in the repository.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Open Terminal (Mac) or Git Bash (Windows)
touch .gitignore # Creates git ignore file
# Open the file to edit, then commit the file to your GitHub repository&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example of a git ignore file is below. As demonstrated, an asterisk can be used to designate entire file types to ignore. For example, adding &lt;code&gt;*.zip&lt;/code&gt; would ignore any zip files that are saved locally when using &lt;code&gt;git status&lt;/code&gt; to determine the differences between local files and the repository on GitHub. &lt;img src=&#34;http://LieberInstitute.github.io/rstatsclub/post/2018-04-17-git-to-know-git_files/git%20ignore.png&#34; width=&#34;350&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;The general steps for saving files from your local directory to GitHub is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add -&amp;gt; git commit -&amp;gt; git push&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Git pull will be used to download files from GitHub to match what exists on your local directory.&lt;/p&gt;
&lt;p&gt;This project was written as a brief introduction to Git and GitHub, for individuals who are interested in incorporating Git into their work. This post is by no means a comprehensive introduction. For more detailed information regarding GitHub, and using Git, &lt;a href=&#34;http://happygitwithr.com&#34;&gt;Happy Git and GitHub for the useR&lt;/a&gt; is a great resource.&lt;/p&gt;
&lt;p&gt;Hopefully this post was helpful in serving as a brief introduction and a way to become more familiarized with some of the basic concepts behind Git and GitHub. Feel free to leave questions or share your story in the comments!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
